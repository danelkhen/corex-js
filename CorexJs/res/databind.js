/* Generated by SharpKit 5 v5.4.4 */

var DataBindingPlugin = function (){
};
DataBindingPlugin.databind = function (q){
    DataBindingPlugin.triggerDataBindingEvent(q, "databind", "onbind", DataBindingPlugin.element_databind_default);
    return q;
};
DataBindingPlugin.databindback = function (q){
    DataBindingPlugin.triggerDataBindingEvent(q, "databindback", "onbindback", DataBindingPlugin.element_databindback_default);
    return q;
};
DataBindingPlugin.element_databind_default = function (e){
    var target = $(e.target);
    var dataSource = target.data("source");
    var dataMember = target.data("member");
    var bindings = DataBindingPlugin.getBindings(e.target);
    if (bindings != null)
        DataBindingPlugin.databind_bind(dataSource, e.target, bindings);
    var children = target.children(":not(.Template)");
    var childSource = dataSource;
    if (childSource != null && dataMember != null)
        childSource = childSource[dataMember];
    children.toArray().forEach(function (t){
        var t2 = $(t);
        var ctx = t2.data("source");
        if (ctx == null || t2.data("inherited-source") == ctx){
            t2.data("source", childSource);
            t2.data("inherited-source", childSource);
        }
    });
    children.databind();
};
DataBindingPlugin.element_databindback_default = function (e){
    var target = $(e.target);
    var dataSource = target.data("source");
    var bindings = DataBindingPlugin.getBindings(e.target);
    if (bindings != null)
        DataBindingPlugin.databind_bindBack(dataSource, e.target, bindings);
    target.children(":not(.Template)").databindback();
};
DataBindingPlugin.databind_bind = function (source, target, bindings){
    if (bindings == null || target == null || source == null)
        return;
    bindings.forEach(function (t){
        if (t.TargetPath == "children")
            DataBindingPlugin.bindArrayToChildren(target, null, BindingExt.tryGetByPath(source, t.SourcePath));
        else
            DataBindingPlugin.databind_tryCopy(source, t.SourcePath, target, t.TargetPath);
    });
};
DataBindingPlugin.databind_bindBack = function (source, target, bindings){
    bindings.forEach(function (t){
        if (t.TargetPath == "children"){
        }
        else {
            DataBindingPlugin.databind_tryCopy(target, t.TargetPath, source, t.SourcePath);
        }
    });
};
DataBindingPlugin.databind_tryCopy = function (source, sourcePath, target, targetPath){
    var value = BindingExt.tryGetByPath(source, sourcePath);
    Object.trySet(target, targetPath, value);
};
DataBindingPlugin.bindArrayToChildren = function (target, template, source){
    var list = source;
    var el2 = $(target);
    var template2 = $(template);
    if (template2.length == 0)
        template2 = el2.find(".Template:first");
    if (template2.length == 0)
        return;
    if (list == null)
        list = el2.data("source");
    if (!(list instanceof Array))
        return;
    var children = el2.children(":not(.Template)").toArray();
    var createTemplate = function (t){
        return template2.clone(true).removeClass("Template").data("source", t);
    };
    DataBindingPlugin.bindArrayToChildrenInternal(list, el2, children, createTemplate);
};
DataBindingPlugin.bindArrayToChildrenInternal = function (source, target, children, creator){
    var index = 0;
    var index2 = 0;
    while (index2 < children.length){
        var ch2 = $(children[index2]);
        var dc2 = ch2.data("source");
        if (dc2 == null){
            index2++;
            continue;
        }
        var dc = source[index];
        if (dc != dc2){
            if (dc == null){
                ch2.remove();
                index2++;
                continue;
            }
            else {
                var ch3 = creator(dc);
                ch3.insertBefore(ch2);
                index++;
                continue;
            }
        }
        index2++;
        index++;
    }
    while (index < source.length){
        target.append(creator(source[index]));
        index++;
    }
};
DataBindingPlugin.getBindings = function (el){
    var bindings = DataBindingPlugin.parseBindings($(el).data("bindings"), DataBindingPlugin.getDefaultBindingTarget(el));
    return bindings;
};
DataBindingPlugin.parseBindings = function (s, defaultTarget){
    if (s == null || s == "")
        return null;
    var pairs = s.split(";");
    var list =  [];
    pairs.forEach(function (pair){
        if (pair == "")
            return;
        var pair2 = pair.split(":");
        var b = {
            SourcePath: pair2[0],
            TargetPath: (pair2[1] != null ? pair2[1] : defaultTarget)
        };
        list.push(b);
    });
    return list;
};
DataBindingPlugin.getDefaultBindingTarget = function (el){
    if (el.nodeName == "INPUT"){
        if (["radio", "checkbox"].contains(el.type))
            return "checked";
    }
    return "value";
};
DataBindingPlugin.triggerDataBindingEvent = function (q, type, attrName, defaultBehavior){
    q.each(function (i, el){
        var ev = new jQuery.Event(type);
        var target = $(el);
        DataBindingPlugin.triggerDataBindingAttrEvent(ev, attrName, target);
        if (ev.isDefaultPrevented())
            return;
        target.triggerHandler(ev);
        if (ev.isDefaultPrevented())
            return;
        defaultBehavior(ev);
    });
};
DataBindingPlugin.triggerDataBindingAttrEvent = function (e, attrName, target){
    var source = target.data("source");
    var member = target.data("member");
    DataBindingPlugin.triggerAttributeEvent(e, attrName, source, member);
};
DataBindingPlugin.triggerAttributeEvent = function (e, attrName, source, member){
    var att = $(e.target).data(attrName);
    if (att == null)
        return;
    var func = new Function("event", "source", "member", "target", att);
    var returnValue = func.call(e.target, e, source, member, e.target);
    if (!e.isDefaultPrevented() && returnValue === false)
        e.preventDefault();
};
$.fn.databind = function (){
    return DataBindingPlugin.databind(this);
};
$.fn.databindback = function (){
    return DataBindingPlugin.databindback(this);
};
var BindingExt = function (){
};
BindingExt.tryGetByPath = function (obj, path){
    if (path == null || path == "")
        return obj;
    return Object.tryGet(obj, path);
};

