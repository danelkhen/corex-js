/* Generated by SharpKit 5 v5.4.4 */
if (typeof($CreateDelegate)=='undefined'){
    if(typeof($iKey)=='undefined') var $iKey = 0;
    if(typeof($pKey)=='undefined') var $pKey = String.fromCharCode(1);
    var $CreateDelegate = function(target, func){
        if (target == null || func == null) 
            return func;
        if(func.target==target && func.func==func)
            return func;
        if (target.$delegateCache == null)
            target.$delegateCache = {};
        if (func.$key == null)
            func.$key = $pKey + String(++$iKey);
        var delegate;
        if(target.$delegateCache!=null)
            delegate = target.$delegateCache[func.$key];
        if (delegate == null){
            delegate = function(){
                return func.apply(target, arguments);
            };
            delegate.func = func;
            delegate.target = target;
            delegate.isDelegate = true;
            if(target.$delegateCache!=null)
                target.$delegateCache[func.$key] = delegate;
        }
        return delegate;
    }
}


var Binder = function (options){
    this.Options = null;
    this.Options = options;
};
Binder.prototype.init = function (e){
    if (this.Options.targetPath == null)
        this.Options.targetPath = Binder.getDefaultTargetPath(e.target);
    if (this.Options.triggers != null && this.Options.triggers.length > 0){
        var target = $(e.target);
        target.on(this.Options.triggers, $CreateDelegate(this, this.databindback));
    }
};
Binder.prototype.databind = function (e){
    var target = $(e.target);
    var source = target.data("source");
    if (this.Options.targetPath == "children")
        Binder.bindArrayToChildren(target, null, BindingExt.tryGetByPath(source, this.Options.sourcePath));
    else
        Binder.databind_tryCopy(source, this.Options.sourcePath, e.target, this.Options.targetPath);
};
Binder.prototype.databindback = function (e){
    if (this.Options.oneway)
        return;
    if (this.Options.targetPath == "children")
        return;
    var target = $(e.target);
    var source = target.data("source");
    Binder.databind_tryCopy(e.target, this.Options.targetPath, source, this.Options.sourcePath);
};
Binder.prototype.destroy = function (e){
    if (this.Options.triggers != null && this.Options.triggers.length > 0){
        var target = $(e.target);
        target.off(this.Options.triggers, $CreateDelegate(this, this.databindback));
    }
};
Binder.databind_tryCopy = function (source, sourcePath, target, targetPath){
    var value = BindingExt.tryGetByPath(source, sourcePath);
    Object.trySet(target, targetPath, value);
};
Binder.bindArrayToChildren = function (target, template, source){
    var list = source;
    var el2 = $(target);
    var template2 = $(template);
    if (template2.length == 0)
        template2 = el2.find(".Template:first");
    if (template2.length == 0)
        return;
    if (list == null)
        list = el2.data("source");
    if (!(list instanceof Array))
        return;
    var children = el2.children(":not(.Template)").toArray();
    var createTemplate = function (t){
        return template2.clone(true).removeClass("Template").data("source", t);
    };
    Binder.bindArrayToChildrenInternal(list, el2, children, createTemplate);
};
Binder.bindArrayToChildrenInternal = function (source, target, children, creator){
    var index = 0;
    var index2 = 0;
    while (index2 < children.length){
        var ch2 = $(children[index2]);
        var dc2 = ch2.data("source");
        if (dc2 == null){
            index2++;
            continue;
        }
        var dc = source[index];
        if (dc != dc2){
            if (dc == null){
                ch2.remove();
                index2++;
                continue;
            }
            else {
                var ch3 = creator(dc);
                ch3.insertBefore(ch2);
                index++;
                continue;
            }
        }
        index2++;
        index++;
    }
    while (index < source.length){
        target.append(creator(source[index]));
        index++;
    }
};
Binder.getDefaultTargetPath = function (el){
    if (el.nodeName == "INPUT"){
        if (["radio", "checkbox"].contains(el.type))
            return "checked";
    }
    return "value";
};
if (typeof(CorexJs) == "undefined")
    var CorexJs = {};
if (typeof(CorexJs.DataBinding) == "undefined")
    CorexJs.DataBinding = {};
CorexJs.DataBinding.Plugin = function (){
};
CorexJs.DataBinding.Plugin.databind = function (q){
    CorexJs.DataBinding.Plugin.triggerDataBindingEvent(q, "databind", "onbind", CorexJs.DataBinding.Plugin.element_databind_default);
    return q;
};
CorexJs.DataBinding.Plugin.databindback = function (q){
    CorexJs.DataBinding.Plugin.triggerDataBindingEvent(q, "databindback", "onbindback", CorexJs.DataBinding.Plugin.element_databindback_default);
    return q;
};
CorexJs.DataBinding.Plugin.ProcessAndGetDataAttribute = function (q, name, processor){
    var x = q.data(name);
    if (x == null)
        return null;
    if (typeof(x) == "string"){
        var value = processor(x);
        q.data(name, value);
        return value;
    }
    return x;
};
CorexJs.DataBinding.Plugin.evalBinders = function (code){
    var func = new Function(code);
    return func.call();
};
CorexJs.DataBinding.Plugin.element_setup_default = function (e){
    var target = $(e.target);
    var binders2 = CorexJs.DataBinding.Plugin.ProcessAndGetDataAttribute(target, "bindings", CorexJs.DataBinding.Plugin.parseBindings);
    var binders = CorexJs.DataBinding.Plugin.ProcessAndGetDataAttribute(target, "binders", CorexJs.DataBinding.Plugin.evalBinders);
    if (binders2 != null){
        if (binders == null){
            binders =  [];
            target.data("binders", binders);
        }
        binders.addRange(binders2);
    }
    if (binders != null)
        binders.forEach(function (t){
            t.init(e);
        });
};
CorexJs.DataBinding.Plugin.element_teardown_default = function (e){
    var target = $(e.target);
    var binders = target.data("binders");
    if (binders != null){
        binders.forEach(function (t){
            t.destroy(e);
        });
        target.removeData("binders");
    }
};
CorexJs.DataBinding.Plugin.verifyInit = function (e){
    var target = $(e.target);
    var isInited = target.data("databind-isinited") === true;
    if (!isInited)
        CorexJs.DataBinding.Plugin.triggerDataBindingEvent(target, "setup", "onsetup", CorexJs.DataBinding.Plugin.element_setup_default);
};
CorexJs.DataBinding.Plugin.element_databind_default = function (e){
    CorexJs.DataBinding.Plugin.verifyInit(e);
    var target = $(e.target);
    var dataSource = target.data("source");
    var dataMember = target.data("member");
    CorexJs.DataBinding.Plugin.verifyInit(e);
    var binders = target.data("binders");
    if (binders != null){
        binders.forEach(function (t){
            t.databind(e);
        });
    }
    var children = target.children(":not(.Template)");
    var childSource = dataSource;
    if (childSource != null && dataMember != null)
        childSource = childSource[dataMember];
    children.toArray().forEach(function (t){
        var t2 = $(t);
        var ctx = t2.data("source");
        if (ctx == null || t2.data("inherited-source") == ctx){
            t2.data("source", childSource);
            t2.data("inherited-source", childSource);
        }
    });
    children.databind();
};
CorexJs.DataBinding.Plugin.element_databindback_default = function (e){
    CorexJs.DataBinding.Plugin.verifyInit(e);
    var target = $(e.target);
    var dataSource = target.data("source");
    var binders = target.data("binders");
    if (binders != null)
        binders.forEach(function (t){
            t.databindback(e);
        });
    target.children(":not(.Template)").databindback();
};
CorexJs.DataBinding.Plugin.parseBindings = function (s){
    var obj = CorexJs.DataBinding.Plugin.parseStyleAttr(s);
    if (obj == null)
        return null;
    var list =  [];
    Object.forEach(obj, function (k, v){
        var tokens = v.split(" ");
        var options = {
            sourcePath: k,
            targetPath: tokens[0]
        };
        for (var i = 1; i < tokens.length; i++){
            var token = tokens[i];
            var open = token.indexOf("(");
            var close = token.indexOf(")");
            if (open > 0 && close > open){
                var name = token.substring(0, open);
                var values = token.substring(open + 1, close);
                options[name] = values;
            }
            else {
                options[token] = true;
            }
        }
        list.push(new Binder(options));
    });
    return list;
};
CorexJs.DataBinding.Plugin.parseStyleAttr = function (s){
    if (s == null || s == "")
        return null;
    var pairs = s.split(";");
    var obj = new Object();
    pairs.forEach(function (pair){
        if (pair == "")
            return;
        var pair2 = pair.split(":");
        obj[pair2[0]] = pair2[1];
    });
    return obj;
};
CorexJs.DataBinding.Plugin.triggerDataBindingEvent = function (q, type, attrName, defaultBehavior){
    q.each(function (i, el){
        var ev = new jQuery.Event(type);
        var target = $(el);
        CorexJs.DataBinding.Plugin.triggerDataBindingAttrEvent(ev, attrName, target);
        if (ev.isDefaultPrevented())
            return;
        target.triggerHandler(ev);
        if (ev.isDefaultPrevented())
            return;
        defaultBehavior(ev);
    });
};
CorexJs.DataBinding.Plugin.triggerDataBindingAttrEvent = function (e, attrName, target){
    var context = {
        source: target.data("source"),
        member: target.data("member")
    };
    CorexJs.DataBinding.Plugin.triggerAttributeEvent(e, attrName, context);
};
CorexJs.DataBinding.Plugin.triggerAttributeEvent = function (e, attrName, globalContext){
    var att = $(e.target).data(attrName);
    if (att == null)
        return;
    var func = new Function("event", "context", "with(context){" + att + "}");
    var returnValue = func.call(e.target, e, globalContext);
    if (!e.isDefaultPrevented() && returnValue === false)
        e.preventDefault();
};
var BindingExt = function (){
};
BindingExt.tryGetByPath = function (obj, path){
    if (path == null || path == "")
        return obj;
    return Object.tryGet(obj, path);
};
$.fn.databind = function (){
    return CorexJs.DataBinding.Plugin.databind(this);
};
$.fn.databindback = function (){
    return CorexJs.DataBinding.Plugin.databindback(this);
};

