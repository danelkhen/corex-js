/* Generated by SharpKit 5 v5.4.4 */
if (typeof($CreateDelegate)=='undefined'){
    if(typeof($iKey)=='undefined') var $iKey = 0;
    if(typeof($pKey)=='undefined') var $pKey = String.fromCharCode(1);
    var $CreateDelegate = function(target, func){
        if (target == null || func == null) 
            return func;
        if(func.target==target && func.func==func)
            return func;
        if (target.$delegateCache == null)
            target.$delegateCache = {};
        if (func.$key == null)
            func.$key = $pKey + String(++$iKey);
        var delegate;
        if(target.$delegateCache!=null)
            delegate = target.$delegateCache[func.$key];
        if (delegate == null){
            delegate = function(){
                return func.apply(target, arguments);
            };
            delegate.func = func;
            delegate.target = target;
            delegate.isDelegate = true;
            if(target.$delegateCache!=null)
                target.$delegateCache[func.$key] = delegate;
        }
        return delegate;
    }
}


var Binder = function (source, target, oneWay, triggers){
    this.IsInited = false;
    this.oneway = false;
    this.sourcePath = null;
    this.targetPath = null;
    this.triggers = null;
    this.sourcePath = source;
    this.targetPath = target;
    this.oneway = oneWay;
    this.triggers = triggers;
};
Binder.prototype.verifyInit = function (e){
    if (this.IsInited)
        return;
    this.init(e);
};
Binder.prototype.init = function (e){
    if (this.IsInited){
        console.log("already inited");
        return;
    }
    this.IsInited = true;
    if (Q.isNullOrEmpty(this.targetPath))
        this.targetPath = Binder.getDefaultTargetPath(e.target);
    if (this.triggers != null && this.triggers.length > 0){
        var target = $(e.target);
        target.on(this.triggers, $CreateDelegate(this, this.onTrigger));
    }
};
Binder.prototype.onTrigger = function (e){
    console.log("Trigger: " + e.type);
    if (this.oneway)
        this.databind(e);
    else
        this.databindback(e);
};
Binder.prototype.databind = function (e){
    this.verifyInit(e);
    var target = $(e.target);
    var source = target.data("source");
    Binder.databind_tryCopy(source, this.sourcePath, e.target, this.targetPath);
    console.log("databind: source." + this.sourcePath + " -> source." + this.targetPath + " = ", BindingExt.tryGetByPath(e.target, this.targetPath));
};
Binder.prototype.databindback = function (e){
    if (this.oneway)
        return;
    this.verifyInit(e);
    var target = $(e.target);
    var source = target.data("source");
    Binder.databind_tryCopy(e.target, this.targetPath, source, this.sourcePath);
    console.log("databindback: target." + this.targetPath + " -> source." + this.sourcePath + " = ", BindingExt.tryGetByPath(source, this.sourcePath));
};
Binder.prototype.destroy = function (e){
    if (this.triggers != null && this.triggers.length > 0){
        var target = $(e.target);
        target.off(this.triggers, $CreateDelegate(this, this.databindback));
    }
};
Binder.databind_tryCopy = function (source, sourcePath, target, targetPath){
    var value = BindingExt.tryGetByPath(source, sourcePath);
    Object.trySet(target, targetPath, value);
};
Binder.getDefaultTargetPath = function (el){
    if (el.nodeName == "INPUT"){
        if (["radio", "checkbox"].contains(el.type))
            return "checked";
    }
    return "value";
};
var BindersContext = function (){
};
BindersContext.prototype.oneway = function (source, target){
    return new Binder(source, target, true, null);
};
BindersContext.prototype.onewayonchange = function (source, target){
    return new Binder(source, target, true, "change");
};
BindersContext.prototype.twoway = function (source, target){
    return new Binder(source, target, false, null);
};
BindersContext.prototype.onchange = function (source, target){
    return new Binder(source, target, false, "change");
};
BindersContext.prototype.children = function (source){
    return new ChildrenBinder(source);
};
var ChildrenBinder = function (sourcePath){
    this.sourcePath = null;
    this.sourcePath = sourcePath;
};
ChildrenBinder.prototype.databind = function (e){
    var target = $(e.target);
    var source = target.data("source");
    ChildrenBinder.bindArrayToChildren(target, null, BindingExt.tryGetByPath(source, this.sourcePath));
};
ChildrenBinder.prototype.databindback = function (e){
};
ChildrenBinder.bindArrayToChildren = function (target, template, source){
    var list = source;
    var el2 = $(target);
    var template2 = $(template);
    if (template2.length == 0)
        template2 = el2.find(".Template:first");
    if (template2.length == 0)
        return;
    if (list == null)
        list = el2.data("source");
    if (!(list instanceof Array))
        return;
    var children = el2.children(":not(.Template)").toArray();
    var createTemplate = function (t){
        return template2.clone(true).removeClass("Template").data("source", t);
    };
    ChildrenBinder.bindArrayToChildrenInternal(list, el2, children, createTemplate);
};
ChildrenBinder.bindArrayToChildrenInternal = function (source, target, children, creator){
    var index = 0;
    var index2 = 0;
    while (index2 < children.length){
        var ch2 = $(children[index2]);
        var dc2 = ch2.data("source");
        if (dc2 == null){
            index2++;
            continue;
        }
        var dc = source[index];
        if (dc != dc2){
            if (dc == null){
                ch2.remove();
                index2++;
                continue;
            }
            else {
                var ch3 = creator(dc);
                ch3.insertBefore(ch2);
                index++;
                continue;
            }
        }
        index2++;
        index++;
    }
    while (index < source.length){
        target.append(creator(source[index]));
        index++;
    }
};
if (typeof(CorexJs) == "undefined")
    var CorexJs = {};
if (typeof(CorexJs.DataBinding) == "undefined")
    CorexJs.DataBinding = {};
CorexJs.DataBinding.Plugin = function (){
};
CorexJs.DataBinding.Plugin.databindflat = function (q){
    CorexJs.DataBinding.Plugin.triggerDataBindingEvent(q, "databind", {
        flat: true
    }, "onbind", CorexJs.DataBinding.Plugin.element_databind_default);
    return q;
};
CorexJs.DataBinding.Plugin.databind = function (q){
    CorexJs.DataBinding.Plugin.triggerDataBindingEvent(q, "databind", null, "onbind", CorexJs.DataBinding.Plugin.element_databind_default);
    return q;
};
CorexJs.DataBinding.Plugin.databindback = function (q){
    CorexJs.DataBinding.Plugin.triggerDataBindingEvent(q, "databindback", null, "onbindback", CorexJs.DataBinding.Plugin.element_databindback_default);
    return q;
};
CorexJs.DataBinding.Plugin.addBinder = function (q, binder){
    var binders = CorexJs.DataBinding.Plugin.ProcessAndGetDataAttribute(q, "binders", CorexJs.DataBinding.Plugin.evalBinders);
    if (binders == null){
        binders =  [];
        q.data("binders", binders);
    }
    binders.push(binder);
    return q;
};
CorexJs.DataBinding.Plugin.ProcessAndGetDataAttribute = function (q, name, processor){
    var x = q.data(name);
    if (x == null)
        return null;
    if (typeof(x) == "string"){
        var value = processor(x);
        q.data(name, value);
        return value;
    }
    return x;
};
CorexJs.DataBinding.Plugin.evalBinders = function (code){
    if (!code.contains("return"))
        code = "return " + code;
    var ctx = new BindersContext();
    code = "with(ctx){" + code + "}";
    var func = new Function("ctx", code);
    var res = func.call(null, ctx);
    return res;
};
CorexJs.DataBinding.Plugin.element_setup_default = function (e){
    var target = $(e.target);
    var binders2 = CorexJs.DataBinding.Plugin.ProcessAndGetDataAttribute(target, "bindings", CorexJs.DataBinding.Plugin.parseBindings);
    var binders = CorexJs.DataBinding.Plugin.ProcessAndGetDataAttribute(target, "binders", CorexJs.DataBinding.Plugin.evalBinders);
    if (binders2 != null){
        if (binders == null){
            binders =  [];
            target.data("binders", binders);
        }
        binders.addRange(binders2);
    }
};
CorexJs.DataBinding.Plugin.element_teardown_default = function (e){
    var target = $(e.target);
    var binders = target.data("binders");
    if (binders != null){
        binders.forEach(function (t){
            t.destroy(e);
        });
        target.removeData("binders");
    }
};
CorexJs.DataBinding.Plugin.isinited = function (target){
    return target.data("databind-isinited") === true;
};
CorexJs.DataBinding.Plugin.set_isinited = function (target){
    target.data("databind-isinited", true);
};
CorexJs.DataBinding.Plugin.verifyInit = function (el){
    var target = $(el);
    var isInited = CorexJs.DataBinding.Plugin.isinited(target);
    if (!isInited){
        CorexJs.DataBinding.Plugin.set_isinited(target);
        CorexJs.DataBinding.Plugin.triggerDataBindingEvent(target, "init", null, "oninit", CorexJs.DataBinding.Plugin.element_setup_default);
    }
};
CorexJs.DataBinding.Plugin.element_databind_default = function (e){
    CorexJs.DataBinding.Plugin.verifyInit(e.target);
    var target = $(e.target);
    var dataSource = target.data("source");
    var dataMember = target.data("member");
    var binders = target.data("binders");
    if (binders != null){
        binders.forEach(function (t){
            t.databind(e);
        });
    }
    if (e.flat)
        return;
    var children = target.children(":not(.Template)");
    var childSource = dataSource;
    if (childSource != null && dataMember != null)
        childSource = childSource[dataMember];
    children.toArray().forEach(function (t){
        var t2 = $(t);
        var ctx = t2.data("source");
        if (ctx == null || t2.data("inherited-source") == ctx){
            t2.data("source", childSource);
            t2.data("inherited-source", childSource);
        }
    });
    children.databind();
};
CorexJs.DataBinding.Plugin.element_databindback_default = function (e){
    CorexJs.DataBinding.Plugin.verifyInit(e.target);
    var target = $(e.target);
    var dataSource = target.data("source");
    var binders = target.data("binders");
    if (binders != null)
        binders.forEach(function (t){
            t.databindback(e);
        });
    target.children(":not(.Template)").databindback();
};
CorexJs.DataBinding.Plugin.parseBindings = function (s){
    return null;
};
CorexJs.DataBinding.Plugin.parseStyleAttr = function (s){
    if (s == null || s == "")
        return null;
    var pairs = s.split(";");
    var obj = new Object();
    pairs.forEach(function (pair){
        if (pair == "")
            return;
        var pair2 = pair.split(":");
        obj[pair2[0]] = pair2[1];
    });
    return obj;
};
CorexJs.DataBinding.Plugin.triggerDataBindingEvent = function (q, type, props, attrName, defaultBehavior){
    q.each(function (i, el){
        var ev = new jQuery.Event(type, props);
        CorexJs.DataBinding.Plugin.triggerDataBindingAttrEvent(ev, attrName, el);
        if (ev.isDefaultPrevented())
            return;
        var target = $(el);
        target.triggerHandler(ev);
        if (ev.isDefaultPrevented())
            return;
        defaultBehavior(ev);
    });
};
CorexJs.DataBinding.Plugin.triggerDataBindingAttrEvent = function (e, attrName, el){
    var target = $(el);
    var context = {
        source: target.data("source"),
        member: target.data("member")
    };
    e.target = el;
    CorexJs.DataBinding.Plugin.triggerAttributeEvent(e, attrName, context);
};
CorexJs.DataBinding.Plugin.triggerAttributeEvent = function (e, attrName, globalContext){
    var target = $(e.target);
    var att = target.data(attrName);
    if (att == null)
        return;
    var func = null;
    try{
        func = new Function("event", "context", "with(context){" + att + "}");
    }
    catch(ee){
        console.warn(ee, att);
        return;
    }
    var returnValue = func.call(e.target, e, globalContext);
    if (!e.isDefaultPrevented() && returnValue === false)
        e.preventDefault();
};
var BindingExt = function (){
};
BindingExt.tryGetByPath = function (obj, path){
    if (path == null || path == "")
        return obj;
    return Object.tryGet(obj, path);
};
$.fn.databind = function (){
    return CorexJs.DataBinding.Plugin.databind(this);
};
$.fn.databindflat = function (){
    return CorexJs.DataBinding.Plugin.databindflat(this);
};
$.fn.databindback = function (){
    return CorexJs.DataBinding.Plugin.databindback(this);
};
$.fn.addBinder = function (binder){
    return CorexJs.DataBinding.Plugin.addBinder(this, binder);
};
$.fn.dataparent = function (){
    var source = this.data("source");
    var prev = this;
    var el = this.parent();
    while (el.length > 0){
        if (el.data("source") != source)
            break;
        prev = el;
        el = el.parent();
    }
    return prev;
};

